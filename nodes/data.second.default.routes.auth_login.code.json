{
  "type": "types.second.default.code.js",
  "name": "data.second.default.routes.auth_login.code",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--incoming_route_handler: /auth/login --');\n      \n      // processes login submission \n      // - expecting ajax response \n      \n      let {\n        req,\n        res\n      } = universe.requestsCache[universe.requestId];\n      \n      let redirectTo = req.query.redirect;\n      \n      function respond(){\n        if(redirectTo){\n          res.redirect(redirectTo);\n          return;\n        }\n        return res.send(true);\n      }\n      \n      console.log('redirectTo:', redirectTo);\n      \n      // already logged in? \n      if(req.session.loggedin){\n        return respond();\n      }\n      \n      let htmlNode = await universe.getNodeAtPath(universe.navPathv1(SELF.name, 1, 'login_html'));\n      \n      if(req.method.toLowerCase() != 'post'){\n        // login html \n        res.send(htmlNode.data.html);\n        return resolve(true);\n      }\n      \n      let ownerLoginNode = await universe.getNodeAtPath('private.auth.owner');\n      // let ownerUserNode = await universe.getNodeAtPath('idenities.owner');\n      \n      // check password, todo: bcrypted \n      if(ownerLoginNode.data.passphrase != req.body.passphrase){\n        // failed, resend the login html \n        // - TODO: different? \n        console.error('invalid password');\n        if(redirectTo){\n          res.send(htmlNode.data.html);\n        } else {\n          res.send(false);\n        }\n        return resolve(false);\n      }\n      \n      // set session value \n      // - expecting /auth/grant next \n      req.session.loggedin = true;\n      respond();\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}