{
  "name": "base.second.cloud.services.second.default.remove",
  "type": "types.second.default.service.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--Service:', SELF.name, '--', PATH, AUTH);\n      \n      const path = universe.require('path');\n      const fs = universe.require('fs-extra');\n      const globby = universe.require('globby');\n      const micromatch = universe.require('micromatch');\n      \n      // INPUT.data = {\n      //   name,\n      //   ignoreRemoveFiles,\n      //   opts\n      // }\n      let {\n        name,\n        ignoreRemoveFiles,\n        opts\n      } = INPUT.data;\n      \n      opts = opts || {};\n      \n  \t\tif(name){\n  \t\t  console.error('Missing name for node');\n        resolve({\n          error: true\n        });\n  \t\t  return false;\n  \t\t}\n        \n      console.log('removeNodeAtPath', name);\n      let result = await universe.removeNodeAtPath(name, opts);\n      \n      // removes nodes AND files \n  \t\tlet VOLUME = universe.env.ATTACHED_VOLUME_ROOT;\n\n      // files (remove by default) \n      if(!ignoreRemoveFiles){\n        // console.log('directory removing');\n        try {\n          let foldersToRemove = await globby([name, name + '*'],{\n            expandDirectories: true,\n            onlyDirectories: true,\n            cwd: VOLUME,\n          })\n          console.log('foldersToRemove:', foldersToRemove);\n          \n          for(let folderName of foldersToRemove){\n            try {\n              await fs.remove(path.join(VOLUME, folderName));\n            }catch(err){\n              console.error(err);\n            }\n          }\n          \n        }catch(err){\n          console.error('fs error:', err);\n        }\n      }\n      \n      return resolve(returnResult);\n        \n        \n    }catch(err){\n      console.error('Error:', SELF._path, err);\n      resolve({\n        type: 'types.second.default.error',\n        data: {\n          message: err.toString()\n        }\n      });\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-16T02:18:32.537Z",
  "updatedAt": "2019-03-17T21:50:11.702Z",
  "nodes": []
}