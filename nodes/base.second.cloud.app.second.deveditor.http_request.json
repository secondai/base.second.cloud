{
  "type": "types.second.default.code.js",
  "name": "base.second.cloud.app.second.deveditor.http_request",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--App: DevEditor--');\n      \n      // Route handling: \n      // - check for /api or /frontend \n      // - default to showing the \"app chooser\" screen \n      let {\n        req,\n        res \n      } = universe.requestsCache[universe.requestId];\n      \n      console.log('ROUTE:', req.originalUrl);\n      \n      \n      if(req.originalUrl.indexOf('/frontend') > -1){\n        console.log('Returning frontend');\n        // return frontend code (all nodes)\n        let frontendNode = await universe.getNodeAtPath( universe.navPathv1(SELF.name, 1, 'frontend') );\n        let frontendNodes = [];\n        function toArray(node){\n          node.name = node.name.substr(frontendNode.name.length + 1);\n          frontendNodes.push(node);\n          if(node.nodes){\n            for(let node2 of node.nodes){\n              toArray(node2);\n            }\n            delete node.nodes; // cleanup\n          }\n        }\n        for(let node of frontendNode.nodes){\n          toArray(node);\n        }\n        await universe.httpResponse('send', frontendNodes); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n        \n        return resolve(true);\n      }\n      \n      // Get internal Identity node (how to locate myself) \n      // - does NOT provide auth \n      \n      let privateIdentityNode;\n      let privateIdentityData = {};\n      let connectionMethodNodeData;\n      \n      try {\n        privateIdentityNode = await universe.getNodeAtPath('private.auth.owner');\n        console.log('privateIdentityNode',privateIdentityNode);\n        privateIdentityData = privateIdentityNode.data;\n        \n        let connectionMethodNode = privateIdentityNode = await universe.getNodeAtPath('private.auth.owner.connect_method');\n        connectionMethodNodeData = connectionMethodNode.data;\n        \n      }catch(err){\n        console.error('Failed private identity finding:', err);\n      }\n      // let connectionMethodNodeData = {}\n      // try {\n      //   let identityNodes = await universe.searchMemory({\n      //     cache: 'internal_private_identity',\n      //     filter: {\n      //       sqlFilter: {\n      //         // nodeId: null // OLD: root-level\n      //         type: 'identity_private:0.0.1:local:3298f2j398233',\n      //       },\n      //     }\n      //   });\n      //   privateIdentityData = identityNodes[0].data;\n      //   let connectionMethodNode = identityNodes[0].nodes.find(node=>{return node.type == 'private_identity_connect_method:0.0.1:local:9081j29h3'});\n      //   connectionMethodNodeData = connectionMethodNode.data;\n      // }catch(err){\n      //   console.error('Failed private identity finding:', err);\n      // }\n      \n      let identityNode = {  \n         \"type\":\"types.second.default.external_identity\",\n         \"data\":{  \n            \"identity\": privateIdentityData.identity,\n            \"publicKey\": privateIdentityData.public,\n         },\n         \"nodes\":[  \n            {  \n               \"type\":\"types.second.default.external_identity_connect_method\",\n               \"data\": connectionMethodNodeData,\n            }\n         ]\n      };\n      \n      console.log('identityNode:', JSON.stringify(identityNode,null,2));\n      \n      identityNode = Buffer.from(JSON.stringify(identityNode)).toString('base64');\n      \n      // // Frontend code \n      // let frontend = await universe.getNodeAtPath('private.auth.owner');\n      \n              \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>DevEditor</title>\n              \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n        \n            <script src=\"https://unpkg.com/ipfs/dist/index.min.js\"></script>\n            \n            <link href=\"https://s3-us-west-1.amazonaws.com/seconddev3-public/defaultplatform/0.1.0/main.css?_=${Date.now()}\" rel=\"stylesheet\">\n            \n            <script defer src=\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\" integrity=\"sha384-xymdQtn1n3lH2wcu0qhcdaOpQwyoarkgLVxC/wZ5q7h9gHtxICrpcaSUfygqZGOe\" crossorigin=\"anonymous\"></script>\n            \n          </head>\n          <body>\n            <div id=\"root\"></div>\n            <!-- Supply platform to load -->\n            <!-- Supply environment to load into platform (.zip, github link, or internal app) -->\n            <script type=\"text/javascript\">\n              window.limitedToAppName = 'Developer Editor';\n              // window.useLastOfAppId = 'deveditor';\n              window.limitedToAppZip = '/app/app.second.deveditor/frontend';\n              // window.limitedToAppZip = '/appzip?appId=toolbox'; // local url \n              // window.limitedToAppVersion = 1; \n              window.disallowAutoLaunchCancel = false; // should prevent the \"Startup...\" from even showing...\n              window.startupDelay = 2000;\n              window.appBaseUrl = '/app/app.second.deveditor';\n              \n              window.DEFAULT_INPUT_PATH = 'services.second.default_frontend.input';\n              \n              window.defaultExternalIdentityNode = JSON.parse(atob(\"${identityNode}\"));\n            \n            </script>\n            <script type=\"text/javascript\" src=\"https://s3-us-west-1.amazonaws.com/seconddev3-public/defaultplatform/0.1.0/main.v20.js?v=4\"></script>\n            \n            <script type=\"text/javascript\" src=\"//wzrd.in/standalone/parse-github-url@latest\"></script>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      console.error(err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}