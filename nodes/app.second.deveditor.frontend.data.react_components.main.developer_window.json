{
  "name": "base.second.cloud.app.second.deveditor.frontend.data.react_components.main.developer_window",
  "type": "types.second.default.react_component.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>\n                ErrorLoading from Main: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            browserList: null,\n            remoteList: null,\n            mainEditor: null,\n            remoteFriendList: null,\n            remoteFriendDataList: null\n            // browser: null,\n          }\n        }\n        \n        @autobind\n        handleTest(){\n          this.setState({\n            value: this.state.value + 1\n          })\n        }\n        \n        @autobind\n        async handleClearMemory(){\n          \n          await universe.clearMemory();\n          WINDOW.location.reload();\n          \n        }\n        \n        \n        render(){\n          \n          let LocalComponent = this.props.LocalComponent;\n          \n          // console.log('Rendering LocalComponent in developer_window');\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{position: 'relative', padding:'4px', width: '450px'}}>\n                <div style={{display: (this.props.state.editingMode == 'default' || !this.props.state.editingMode) ? '':'none'}}>\n                  <LocalComponent.left_browser />\n                </div>\n                <div style={{display: (this.props.state.editingMode == 'files') ? '':'none'}}>\n                  <LocalComponent.left_file_browser />\n                </div>\n              </div>\n              <div className=\"flex-middle\" style={{display: (this.props.state.editingMode == 'default' || !this.props.state.editingMode) ? '':'none'}}>\n                \n                {\n                  this.props.state.editingNode ?\n                  <RecreateChildOnPropsChange \n                      node={this.props.state.editingNode}\n                      editorComponent={LocalComponent.editor}\n                    >\n                    <LocalComponent.editor\n                      node={this.props.state.editingNode}\n                    />\n                  </RecreateChildOnPropsChange>\n                  :''\n                }\n                \n              </div>\n              <div className=\"flex-middle\" style={{display: (this.props.state.editingMode == 'files') ? '':'none'}}>\n                \n                {\n                  this.props.state.editingNode ?\n                  <RecreateChildOnPropsChange \n                      editingFilePath={this.props.state.editingFilePath}\n                      editorComponent={LocalComponent.file_editor}\n                    >\n                    <LocalComponent.file_editor\n                      editingFilePath={this.props.state.editingFilePath}\n                    />\n                  </RecreateChildOnPropsChange>\n                  :''\n                }\n                \n              </div>\n              <div className=\"flex-right\" style={{width:'10px'}}>\n                \n                {/*\n                <div>\n                  <RemoteFriendListComponent />\n                </div>\n                */}\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      \n      mycomponent = universe.sharedComponents.loadComponentsHoC(mycomponent, [\n        'data.react_components.main.developer_window.left_browser',\n        'data.react_components.main.developer_window.editor',\n        'data.react_components.main.developer_window.file_editor',\n        'data.react_components.main.developer_window.left_file_browser',\n      ]);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()"
  },
  "blobdata": null,
  "createdAt": "2019-04-03T21:35:24.408Z",
  "updatedAt": "2019-04-03T21:35:24.408Z",
  "nodes": []
}