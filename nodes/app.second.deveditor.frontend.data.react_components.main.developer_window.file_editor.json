{
  "name": "base.second.cloud.app.second.deveditor.frontend.data.react_components.main.developer_window.file_editor",
  "type": "types.second.default.react_component.js",
  "data": {
    "code": "(()=>{\n  \n  \n  let __parsedFiles = {};\n  function jsonParse(key, contents){\n    if(__parsedFiles[key]){\n      return __parsedFiles[key]\n    }\n  \n    __parsedFiles[key] = JSON.parse(contents);\n    return __parsedFiles[key];\n  \n  }\n  \n  \n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            mainTab: '__ALL__',\n            aceHeight: 100,\n            windowHeight: 100,\n            pastable: false,\n            pasteText: '',\n            isPublishing: false,\n            saving: false,\n            updatingGit: false,\n            chainNodes: [],\n            nodeChains: null,\n            value: ''\n          }\n        }\n        \n        componentDidMount(){\n          // console.log('Editor componentDidMount2');\n          this.resizeAce();\n          this.handleKeyDown();\n          \n          this.fetchFile();\n          \n          // universe.EE.on('files-modified', this.fetchParentsOfNodesToLearn);\n          // universe.EE.on('files-modified', this.loadSchema);\n          // universe.EE.on('files-modified', this.checkForCodeUpdates);\n          \n        }\n        \n        componentWillUnmount(){\n          \n          // universe.EE.removeListener('files-modified', this.fetchParentsOfNodesToLearn);\n          // universe.EE.removeListener('files-modified', this.loadSchema);\n          // universe.EE.removeListener('files-modified', this.checkForCodeUpdates);\n          \n        }\n        \n        componentWillReceiveProps(nextProps, nextState){\n          \n          // resizing helpers for Ace height\n          if(!nextProps.state.newWindowSize || \n            this.state.windowHeight != nextProps.state.newWindowSize[1]){\n            this.setState({\n              aceHeight: 0\n            },()=>{\n              this.resizeAce();\n            })\n          }\n          if(nextState.aceHeight == -1){\n            this.setState({\n              aceHeight: 0\n            },()=>{\n              this.resizeAce();\n            })\n          }\n          // if(nextProps.state.editingNode && this.props.node){\n          //   if(nextProps.state.editingNode._id != this.props.node._id){\n          //     this.setState({\n          //       mainTab: '__ALL__'\n          //     })\n          //   }\n          // }\n          // console.log('nextProps:', nextProps);\n        }\n        \n        @autobind\n        async fetchFile(){\n          // fetches selected file \n          console.log('Fetch File:', this.props.state.editingFilePath);\n          \n          if(!this.props.state.editingFilePath){\n            return false;\n          }\n          \n          let fetchUrl = `/api/fs/get/${this.props.state.editingNode.name}${this.props.state.editingFilePath}`;\n          let result = await universe.fetch(fetchUrl,{\n            method: 'POST',\n            headers: {\n              'Accept': 'text/plain',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify()\n          });\n          \n          // console.log('result:', result);\n          let value = await result.text();\n          // console.log('value:', value);\n          \n          this.setState({\n            value,\n            loadedFile: true\n          },()=>{\n            // re-enable\n            this.handleKeyDown();\n          });\n          \n          \n          \n        }\n        \n        @autobind\n        resizeAce(){\n          if(!this.parentRef){\n            this.setState({\n              aceHeight: null\n            })\n            return;\n          }\n          // console.log('Resize ace', this.parentRef.offsetHeight);\n          this.setState({\n            aceHeight: this.parentRef.offsetHeight\n          },()=>{\n            if(this.aceRef){\n              this.aceRef.editor.resize();\n            }\n          })\n        }\n      \n        @autobind\n        handleKeyDown(e){\n          if(this.aceRef && this.aceRef.editor){\n            this.aceRef.editor.commands.addCommand({\n              name: 'save',\n              bindKey: {\n                win: 'Ctrl-S',\n                mac: 'Command-S'\n              },\n              exec: (env, args, request)=>{\n                // this.saveDataUpdates();\n                this.handleSave();\n              }\n            });\n            \n            // overwrite Cmd-D to same as sublime \n            this.aceRef.editor.commands.addCommand({\n              name: 'selectMoreAfter2',\n              bindKey: {\n                win: 'Ctrl-D',\n                mac: 'Command-D'\n              },\n              exec: (env, args, request)=>{\n                // selectMoreAfter\n                // console.log('selectMoreAfter!');\n                this.aceRef.editor.execCommand(\"selectMoreAfter\")\n              }\n            });\n          }\n      \n        }\n        \n        @autobind\n        toggleMode(){\n          this.props.setState({\n            editingMode: 'default'\n          });\n        }\n        \n        @autobind\n        async handleSave(){\n          \n          this.setState({\n            fileActionMessage: 'Saving',\n            fileActionMessagePending: true\n          });\n          \n          let fetchUrl = `/api/fs/putText/${this.props.state.editingNode.name}${this.props.state.editingFilePath}`\n          let result = await universe.fetch(fetchUrl,{\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              type: 'types.second.default.fs_api',\n              data: {\n                // PATH: `${this.props.state.editingNode.name}${this.props.state.editingFilePath}`,\n                // cmd: 'putText',\n                opts: {\n                  text: this.state.value\n                }\n              }\n            })\n          });\n          \n          let jresult = await result.json();\n          \n          this.setState({\n            fileActionMessage: null,\n            fileActionMessagePending: false\n          });\n          \n          return jresult;\n          \n        }\n        \n        @autobind\n        async updateEditingNode(){\n          \n          let node = this.props.state.editingNode;\n          \n          // Get updated node (build conatiner) \n          let editingNode = await this.getNodeAtPath(node.name);\n          this.props.setState({\n            editingNode\n          });\n          \n          // universe.EE.emit('files-modified',{});\n          universe.EE.emit('nodes-modified',{});\n          \n        }\n        \n        @autobind\n        getNodeAtPath(nodePath){\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n              \n              universe.$.ajax({\n                url: '/api/get',\n                method: 'post',\n                contentType: 'application/json',\n                data: JSON.stringify({name: nodePath}),\n                success: result=>{\n                  let node = universe.cJSON.parse(result);\n                  return resolve(node);\n                },\n                error: err=>{\n                  console.error('Failed to find');\n                }\n              });\n              \n              \n            } catch(err){\n              console.error('Failed getting local single node');\n            }\n            \n          });\n        }\n      \n        @autobind\n        async putNodeAtPath(node){\n        \n          console.log('Saving updates (new)');\n          \n          this.setState({\n            saving: true\n          })\n          \n          let fetchUrl = '/api/put';\n          let result = await universe.fetch(fetchUrl,{\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(node)\n          });\n          \n          let jresult = await result.json();\n          \n          return jresult;\n          \n        }\n        \n        @autobind\n        async handleInstallTarget(target){\n          console.log('install target:', target);\n          \n          let node = this.props.state.editingNode;\n          \n          let fetchUrl = `/api/bin/install/${this.props.state.editingNode.name}/${target}`\n          let result = await universe.fetch(fetchUrl,{\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify()\n          });\n          \n          let jresult = await result.json();\n          console.log('jresult', jresult);\n          \n          universe.EE.emit('files-modified',{});\n          \n        }\n        \n        @autobind\n        async handleBuildTarget(target, containerOrCode){\n          console.log('build target:', target);\n          \n          let node = this.props.state.editingNode;\n          \n          this.setState({\n            fileActionMessage: 'Building...',\n            fileActionMessagePending: true\n          });\n          \n          let fetchUrl = `/api/bin/build/${this.props.state.editingNode.name}/${target}`\n          let result = await universe.fetch(fetchUrl,{\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              containerOrCode // 'container-only', 'code-only', 'dependencies-only', 'all' (null, undefined) \n            })\n          });\n          \n          console.log('Finished handleBuildTarget');\n          \n          let jresult = await result.json();\n          console.log('jresult', jresult);\n          \n          let fileActionMessage;\n          let failures = [];\n          let builds = [];\n          if(jresult.data && jresult.data.buildResults){\n            for(let buildResult of jresult.data.buildResults){\n              if(buildResult.error){\n                failures.push(buildResult);\n              } else {\n                builds.push(buildResult);\n              }\n            }\n          }\n          \n          if(failures && failures.length){\n            fileActionMessage = 'Errors: ' + failures[0].message;\n          } else {\n            fileActionMessage = 'OK: Built ' + builds.length;\n          }\n          this.setState({\n            fileActionMessage,\n            fileActionMessagePending: false\n          });\n          \n          universe.EE.emit('files-modified',{});\n          this.fetchFile();\n          \n          // Get updated node (build image) \n          let editingNode = await this.getNodeAtPath(node.name);\n          this.props.setState({\n            editingNode\n          });\n          \n          // universe.EE.emit('files-modified',{});\n          universe.EE.emit('nodes-modified',{});\n          \n        }\n        \n        @autobind\n        async handleClearBuildContainer(target){\n          console.log('clear target:', target);\n          \n          // Update the parent node's \"build.image = null\"  \n          // - and refetch \n          \n          let node = this.props.state.editingNode;\n          \n          node.data.src[target].build.container = null;\n          \n          console.log('NODE:', node);\n          \n          await this.putNodeAtPath(node);\n          \n          // refetch editingNode \n          // - this is lazy\n          let editingNode = await this.getNodeAtPath(node.name);\n          this.props.setState({\n            editingNode\n          });\n          \n          // universe.EE.emit('files-modified',{});\n          universe.EE.emit('nodes-modified',{});\n          \n          // this.fetchFile();\n          \n        }\n        \n        @autobind\n        async handleClearTargetDir(target){\n          console.log('clear target:', target);\n          \n          let node = this.props.state.editingNode;\n          \n          let fetchUrl = `/api/bin/clear/${this.props.state.editingNode.name}/${target}`\n          let result = await universe.fetch(fetchUrl,{\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify()\n          });\n          \n          let jresult = await result.json();\n          console.log('jresult', jresult);\n          \n          universe.EE.emit('files-modified',{});\n          \n        }\n        \n        @autobind\n        renderTargetOptions(){\n          \n          // Get options for building \n          let targets = [];\n          try {\n            let src = this.props.state.editingNode.data.src;\n            targets = Object.keys(src).map(target=>{\n              // console.log('ttt:', target, src[target], src);\n              return {\n                key: target,\n                name: target,\n                data: src[target] // x.src.zipUrl, x.build.command\n              }\n            });\n          }catch(err){}\n          \n          if(!targets.length){\n            console.log('No targets for installing/building');\n            return '';\n          }\n          \n          return (\n            <div style={{display:'inline-block'}}>\n              \n              {\n                targets.length <= 1 ? '':\n                <div className=\"control dropdown is-hoverable\" key={'all'} style={{marginRight:'10px'}}>\n                  <div className=\"dropdown-trigger\">\n                                            \n                    <button className={\"button is-small\" + (this.state.isBuilding ? ' is-loading':'')}>\n                      <span>\n                        All\n                      </span>\n                      <span className=\"icon is-small\">\n                        <i className=\"fa fa-angle-down\"></i>\n                      </span>\n                    </button>\n                  </div>\n                  <div className=\"dropdown-menu\">\n                    <div className=\"dropdown-content\">\n                \n                      <a className=\"dropdown-item\" onClick={e=>{this.handleInstallTarget('all')}}>\n                        Install from repo/zip \n                      </a>\n                      \n                      <a className=\"dropdown-item\" onClick={e=>{this.handleClearTargetDir('all')}}>\n                        Clear directories\n                      </a>\n                      \n                      <div className=\"dropdown-divider\"></div>\n                      \n                      <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget('all')}}>\n                        Build All\n                      </a>\n                      {/*\n                      <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget('all', 'container-only')}}>\n                        Build Container Only \n                      </a>\n                      */}\n                      <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget('all', 'dependencies-only')}}>\n                        Build Dependencies Only \n                      </a>\n                      <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget('all', 'code-only')}}>\n                        Build Code Only \n                      </a>\n                      {/*\n                      <a className=\"dropdown-item\" onClick={e=>{this.handleClearBuildContainer(target.key)}}>\n                        Clear Build Container \n                      </a>\n                      */}\n                      \n                    </div>\n                  </div>\n                </div>\n              }\n              {\n                targets.map(target=>(\n                  <div className=\"control dropdown is-hoverable\" key={target.key}>\n                    <div className=\"dropdown-trigger\">\n                                              \n                      <button className={\"button is-small\" + (this.state.isBuilding ? ' is-loading':'')}>\n                        <span>\n                          {target.name}\n                        </span>\n                        <span className=\"icon is-small\">\n                          <i className=\"fa fa-angle-down\"></i>\n                        </span>\n                      </button>\n                    </div>\n                    <div className=\"dropdown-menu\">\n                      <div className=\"dropdown-content\">\n                  \n                        <a className=\"dropdown-item\" onClick={e=>{this.handleInstallTarget(target.key)}}>\n                          Install: from <strong>{target.data.src.zipUrl || target.data.src.repo}</strong> to <strong>{target.data.src.targetDir}</strong>\n                        </a>\n                        \n                        <a className=\"dropdown-item\" onClick={e=>{this.handleClearTargetDir(target.key)}}>\n                          Clear directory (<strong>{target.data.src.targetDir}</strong>)\n                        </a>\n                        \n                        <div className=\"dropdown-divider\"></div>\n                        \n                        <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget(target.key)}}>\n                          Build All (image:<strong>{target.data.build.image || 'NONE'}</strong>)\n                        </a>\n                        {/*\n                        <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget(target.key, 'container-only')}}>\n                          Build Container Only \n                        </a>\n                        */}\n                        <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget(target.key, 'dependencies-only')}}>\n                          Build Dependencies Only \n                        </a>\n                        <a className=\"dropdown-item\" onClick={e=>{this.handleBuildTarget(target.key, 'code-only')}}>\n                          Build Code Only \n                        </a>\n                        {/*\n                        <a className=\"dropdown-item\" onClick={e=>{this.handleClearBuildContainer(target.key)}}>\n                          Clear Build Container \n                        </a>\n                        */}\n                        \n                      </div>\n                    </div>\n                  </div>\n                ))\n              }\n            </div>\n                  \n          )\n                        \n                        \n        }\n        \n        render(){\n          \n          let parentEditingNode = this.props.state.editingNode;\n          \n          let editingFilePath = this.props.state.editingFilePath;\n          let fileName;\n          if(editingFilePath){\n            fileName = editingFilePath.split('/').pop();\n          }\n          \n          // add \"fields\" to mainTab for the selected Node \n          // - also should show \"unused\" fields from schema? \n          \n          let showEditor = this.state.loadedFile;\n          \n          return (\n            <div className=\"fill-height-or-more\">\n              <div style={{flex:'0 1 auto'}}>\n                <div style={{padding: '4px'}}>\n                  <div className=\"level-NOTANYMORE\">\n                    <div className=\"level-right-NOTANYMORE is-pulled-right\">\n                      <div className=\"level-item-NOTANYMORE\">\n                        <div className=\"field is-grouped\">\n                        \n                          \n                          <div className=\"control dropdown is-right is-hoverable\">\n                            <div className=\"dropdown-trigger\">\n                                                      \n                              <button className={\"button is-small\"}>\n                                <span>More</span>\n                                <span className=\"icon is-small\">\n                                  <i className=\"fa fa-angle-down\"></i>\n                                </span>\n                              </button>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                              <div className=\"dropdown-content\">\n                              \n                                {/*\n                                <a className=\"dropdown-item\" onClick={this.checkIdentity}>\n                                  Check Identity\n                                </a>\n                                */}\n                                \n                              </div>\n                            </div>\n                          </div>\n                          \n                        </div>\n                        \n                      </div>\n                    </div>\n                    <div className=\"level-left-NOTANYMORE\">\n                      <div className=\"level-item-NOTANYMORE\">\n                        <h3 className=\"title is-5\">\n                          {\n                            parentEditingNode.name\n                          }\n                        </h3>\n                        <h3 className=\"subtitle is-6\">\n                          {parentEditingNode.type || (<span style={{fontStyle:'italic'}}>missing type</span>)} &nbsp;\n                          {parentEditingNode.placeholder ? '(placeholder)':''}\n                        </h3>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div style={{flex:'0 1 auto'}}>\n                <div style={{padding: '4px'}}>\n                  <div className=\"level\">\n                    <div className=\"level-left\">\n                      <div className=\"level-item\">\n                        <div className=\"field is-grouped\">\n                        \n                          <p className=\"control\">\n                            <a className=\"button is-small is-default\" onClick={this.updateEditingNode}>\n                              <span className=\"icon is-small\">\n                                <i className=\"fas fa-sync\"></i>\n                              </span>\n                            </a>\n                          </p>\n                          \n                          <p className=\"control\">\n                            <a className=\"button is-small is-info\" onClick={this.toggleMode}>\n                              &lt; Node\n                            </a>\n                          </p>\n                          \n                          <p className=\"control\">\n                            {this.renderTargetOptions()}\n                          </p>\n                          \n                          {\n                            !this.state.fetchingRemote ? '':\n                            <p className=\"control\">\n                              <a className={\"button is-small is-white is-loading\"}>\n                                &nbsp;\n                              </a>\n                              <a className={\"button is-small is-white\"}>\n                                Fetching remote...\n                              </a>\n                            </p>\n                          }\n                          \n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              \n              {\n                editingFilePath ? \n                <div style={{flex:'0 1 auto'}}>\n                  <div>\n                    <h3 className=\"title is-3\">\n                      {\n                        editingFilePath\n                      }\n                    </h3>\n                  </div>\n                </div>\n                :''\n              }\n              \n              {\n                showEditor ? \n                <div style={{flex:'0 1 auto'}}>\n                  <div style={{padding: '4px'}}>\n                    <div className=\"level\">\n                      <div className=\"level-left\">\n                        <div className=\"level-item\">\n                          <div className=\"field is-grouped\">\n                            \n                            <p className=\"control\">\n                              <a className=\"button is-success is-small\" onClick={this.handleSave}>\n                                Save\n                              </a>\n                            </p>\n                            \n                            {\n                              !this.state.fileActionMessage ? '':\n                              <p className=\"control\">\n                                {\n                                  this.state.fileActionMessagePending ?\n                                  <a className={\"button is-small is-white is-loading\"}>\n                                    &nbsp;\n                                  </a>:''\n                                }\n                                <a className={\"button is-small is-white\"}>\n                                  {this.state.fileActionMessage}\n                                </a>\n                              </p>\n                            }\n                            \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                :''\n              }\n              \n              <div \n                className=\"\" \n                style={{flex:'1 1 auto'}}\n                ref={r=>this.parentRef=r}\n                >\n                <div \n                  style={{height: this.state.aceHeight+'px', position: 'relative'}} \n                  >\n                  \n                  {\n                    !showEditor ? '':\n                    <AceEditor\n                      ref={r=>this.aceRef=r}\n                      mode=\"jsx\"\n                      theme=\"monokai\"\n                      value={this.state.value}\n                      onChange={value=>{\n                        // if(this.state.mainTab == '__ALL__'){\n                        //   // if(this.state.schema.type == 'object'){\n                        //   //   this.props.setEditState('data', v)\n                        //   // } else {\n                        //   //   // raw\n                        //     this.props.setEditState('data', v)\n                        //   // }\n                        // } else {\n                        //   let newObj = {};\n                        //   newObj[this.state.mainTab] = v;\n                        //   // console.log('onchangedata:', data, this.props.editState.fields.data);\n                        //   let newData = Object.assign({},data,newObj)\n                        //   this.props.setEditState('data', JSON.stringify(newData));\n                        // }\n                        this.setState({value})\n                      }}\n                      name=\"UNIQUE_ID_OF_DIV2\"\n                      editorProps={{$blockScrolling: true}}\n                      width=\"100%\"\n                      height=\"100%\"\n                      onLoad={editor=>{\n                        editor.getSession().setUseWrapMode(true);\n                      }}\n                      setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        showPrintMargin: false,\n                        enableSnippets: true,\n                        behavioursEnabled: false,\n                        showLineNumbers: true,\n                        tabSize: 2\n                      }}\n                    />\n                  }\n                  \n                </div>\n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      \n      // mycomponent = universe.withEditManager(mycomponent,{\n      //   editProp: 'editFile',\n      //   fields: ['type','data'],\n      //   fieldConvertServerOnceFunc: {\n      //     data: v=>{\n      //       return JSON.stringify(v,null,2)\n      //     }\n      //   },\n      //   fieldOutputFunc: {\n      //     data: v=>{\n      //       return JSON.parse(v)\n      //     }\n      //   },\n      //   fieldConvertServerFunc: {\n      //     // tmpData: v=>{\n      //     //   if(v){\n      \n      //     //   }\n      //     //   return v;\n      //     // }\n      //     // data: v=>{\n      //     //   // jsSchema\n      //     //   // console.log('NewServerData:', v);\n      //     //   if(v instanceof String){\n      //     //     return v;\n      //     //   }\n      //     //   return JSON.stringify(v);\n      //     //   // return JSON.stringify({\n      //     //   //   data: v // necessary to do this to retain correct types? \n      //     //   // },null,2)\n      //     // }\n      //   },\n      //   fieldCompareFunc: {\n      //     // uri: (prev, next)=>{\n      //     //   console.log('URI compare!:', prev, next);\n      //     //   return prev === next;\n      //     // }\n      //   }\n      // });\n\n      resolve({\n        type: 'types.second.default.react_component',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n  \n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-16T02:16:27.215Z",
  "updatedAt": "2019-03-17T21:50:26.670Z",
  "nodes": []
}