{
  "name": "base.second.cloud.data.second.default.routes.services_install.code",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--incoming_route_handler: Services Install (for owner) --');\n      \n      let htmlNode, page;\n      \n      // get request session object (for finding if logged in using a cookie) \n      let {\n        req,\n        res \n      } = universe.requestsCache[universe.requestId];\n      \n      \n      htmlNode = await universe.getNodeAtPath(universe.navPathv1(SELF.name, 1, 'view_html'));\n      page = htmlNode.data.html;\n      \n      res.send(page);\n      \n      return resolve(true);\n    \n      // if(req.session.loggedin){\n        \n      //   if(req.method.toLowerCase() == 'post'){\n      //     // granting request \n          \n          \n      //   } else {\n      //     // // show the \"grant\" page \n      //     // htmlNode = await universe.getNodeAtPath(SELF.name + '.view_html');\n      //     // page = htmlNode.data.html;\n      //   }\n        \n      // } else {\n        \n      //   // htmlNode = await universe.getNodeAtPath('data.second.default.routes.auth_grant.login_html');\n      //   // page = htmlNode.data.html;\n        \n      //   res.redirect(`/auth/login?redirect=${encodeURIComponent(req.originalUrl)}`);\n      //   return resolve(true);\n        \n      // }\n\n      // res.send(page);\n      \n      // return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-27T08:23:11.943Z",
  "updatedAt": "2019-04-07T06:39:15.310Z",
  "nodes": []
}