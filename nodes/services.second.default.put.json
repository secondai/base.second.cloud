{
  "name": "base.second.cloud.services.second.default.put",
  "type": "types.second.default.service.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--service:', SELF._path, '--', PATH, AUTH);\n      \n      // console.log('INPUT:', INPUT); \n      \n  \t\tlet node = {\n  \t\t  type: INPUT.type,\n  \t\t  data: INPUT.data,\n  \t\t}\n      \n      let opts = {};\n      let value;\n        \n      // console.log('putNodeAtPath', PATH, node);\n      let result;\n      try {\n        result = await universe.putNodeAtPath(PATH, node, null, opts);\n      }catch(err){\n        // determine why failure \n        console.error('Failed putNodeAtPath:', err);\n        return resolve({\n          type: 'types.second.default.error',\n          data: {\n            message: 'Failed putNodeAtPath',\n            error: err\n          }\n        });\n      }\n      // let result = node;\n      \n      console.log('Result of saving putNodeAtPath (new node w/ _id)', result);\n      \n      let returnResult;\n      \n      if(result){\n        // success \n        returnResult = {\n          type: 'types.second.default.boolean',\n          data: true\n        }\n      } else {\n        // failure \n        returnResult = {\n          type: 'types.second.default.null',\n          data: null\n        }\n      }\n      \n      return resolve(returnResult);\n        \n        \n    }catch(err){\n      console.error('Error:', SELF._path, err);\n      resolve({\n        type: 'types.second.default.error',\n        data: {\n          message: err.toString()\n        }\n      });\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-05T06:16:16.009Z",
  "updatedAt": "2019-03-16T03:41:22.688Z",
  "nodes": []
}