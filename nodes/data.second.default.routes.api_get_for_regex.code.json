{
  "name": "base.second.cloud.data.second.default.routes.api_get_for_regex.code",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--incoming_route_handler: /api/get_for_regex --');\n      \n      // This is just temporary! \n      \n      let bodyNode = INPUT.data.req.body;\n      \n      console.log('bodyNode:', bodyNode);\n      \n  \t\t// expecting an _id! \n  \t\t\n  \t\tif(!bodyNode.name){\n  \t\t  console.error('Missing array of regexs for name');\n        await universe.httpResponse('send', false);\n  \t\t  return false;\n  \t\t}\n  \t\t\n  \t\t// array of paths is expected\n  \t\t// - i.e. [\"data.second.default.routes.*\"]\n  \t\tconst Op = universe.sharedServices.db.Sequelize.Op;\n\t\t  let nodes = await universe.sharedServices.db.Node.findAll({\n\t\t    where: {\n\t\t      name: {\n\t\t        [Op.regexp]: bodyNode.name\n\t\t      }\n\t\t    },\n\t\t    raw: true\n\t\t  });\n\t\t  \n      // let nodes = await universe.getNodesForPathPattern(bodyNode.paths,{});\n      \n      let response = nodes;\n      await universe.httpResponse('send', response);\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      \n      universe.scriptError(err, SELF);\n      \n      // let lineNum = 'unknown';\n      // let lineCode = '';\n      // let message = '';\n      // let stacktrace = '';\n      // try {\n        \n      //   if (typeof err === 'object') {\n          \n      //     message= err.message;\n          \n      //     let lineNums = err.stack.match(/vm.js:\\d+/g);\n      //     if(lineNums.length){\n      //       lineNum = lineNums[0].split(':').pop();\n      //       lineCode = SELF.data.code.split(\"\\n\")[lineNum - 1];\n      //     }\n      //     if (err.stack) {\n      //       stacktrace = err.stack;\n      //     }\n      //   } else {\n      //     console.error('dumpError :: argument is not an object', err);\n      //   }\n      // }catch(err){\n      //   console.error('---Unable to load lines---');\n      // }\n      \n      // console.error('====Error in CodeNode====');\n      // console.error('Message:', message);\n      // console.error('CodeNode:', SELF.name);\n      // console.error('Line Number:', lineNum);\n      // console.error('Line Code:', lineCode.trim());\n      // console.error('Stacktrace:', stacktrace);\n      \n      // console.error('Error in CodeNode:', SELF.name, \"\\n\", '(line below in vm.js!)', \"\\n\", err, Object.keys(err));\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-27T08:23:11.179Z",
  "updatedAt": "2019-04-07T06:39:14.363Z",
  "nodes": []
}