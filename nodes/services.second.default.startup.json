{
  "name": "base.second.cloud.services.second.default.startup",
  "type": "types.second.default.service.js",
  "data": {
    "key": "caa31b79-0ffc-417a-b7cc-9ed5d61332a6",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n  \n      console.log('Incoming Startup (setup, server, etc)');\n      \n      console.log('Startup INPUT:', INPUT);\n      \n      // INPUT = {\n      //   type: 'types.second.default.startup_input',\n      //   data: {\n      //     didPopulate: false,\n      //     needsBuild: false,\n      //   }\n      // }\n      \n      // // Start Express Server  \n      // await universe.loadAndRunCapability('ExpressServer',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'setup',\n      //     options: {}\n      //   }\n      // });\n    \n      let doneCanWipe;\n      universe.wipeFunc = new Promise(resolve=>{\n        doneCanWipe = resolve;\n      });\n      \n      // StreamingResponse used in bin.run, etc.\n      function StreamingResponse(){\n        let streamId = universe.uuidv4();\n        this.createdAt = Date.now();\n        this.streamId = streamId;\n        this.responses = [];\n        \n        // make available in universe \n        universe.sharedServices.streaming_responses = universe.sharedServices.streaming_responses || {};\n        universe.sharedServices.streaming_responses[streamId] = this;\n      }\n      StreamingResponse.prototype.streamId = function(){\n        return this.streamId;\n      }\n      StreamingResponse.prototype.add = function(val){\n        return this.responses.push(val);\n      }\n      StreamingResponse.prototype.slice = function(start, end){\n        return this.responses.slice(start, end);\n      }\n      StreamingResponse.prototype.close = function(val){\n        delete universe.sharedServices.streaming_responses[this.streamId];\n      }\n      universe.sharedServices.StreamingResponse = StreamingResponse;\n      \n      // Run \"build all\" if needs it \n      // if(INPUT \n      //   && (INPUT.type == 'types.second.default.startup_input')\n      //   && INPUT.data\n      //   && INPUT.data.needsBuild){\n      if(INPUT && INPUT.data && INPUT.data.needsBuild){\n  \t\t\tawait universe.execService('services.second.default.startup.build_all', {\n          actionPath: 'builtin.input',\n          inputNode: {},\n          isOwner: true\n  \t\t\t});\n      }\n      \n\t\t\t// Create default Identity\n\t\t\tuniverse.execService('services.second.default.startup.identity', {\n        actionPath: 'builtin.input',\n        inputNode: {},\n        isOwner: true\n\t\t\t});\n      \n      // Start Express Server  \n\t\t\tawait universe.execService('services.second.default.capability.server', {\n        actionPath: 'builtin.input',\n        inputNode: {},\n        isOwner: true\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\t// Start IPFS watcher\n\t\t\tawait universe.execService('services.second.default.capability.ipfs', {\n        actionPath: 'builtin.input',\n        inputNode: {},\n        isOwner: true\n\t\t\t});\n\t\t\t\n\t\t// \tTODO: \n\t\t// - start Scheduler \n\t\t// - start Websocket server \n\t\t\t\n\t\t\t\n    \n      \n      // // Start Websocket (socketio) server \n      // let websocketSetupServerResult = await universe.loadAndRunCapability('Websockets',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'setupServer',\n      //     options: {}\n      //   }\n      // });\n      // console.log('Websocket serverSetup Result:', websocketSetupServerResult);\n        \n      // // connect to IPFS and re-setup IPFS links (identity is most important) \n      // var ipfsSetupResult = await universe.loadAndRunCapability('IPFS',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'setup',\n      //     options: {\n      //     }\n      //   }\n      // });\n      // var ipfsSyncResult = await universe.loadAndRunCapability('IPFS',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'sync',\n      //     options: {\n      //     }\n      //   }\n      // });\n    \n      // // Start Scheduler \n      // await universe.loadAndRunCapability('Scheduler',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'start',\n      //     options: {}\n      //   }\n      // });\n      \n      \n      \n      \n      return resolve({\n        type: 'boolean:...',\n        data: true\n      });\n      \n      \n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-04-03T21:35:08.575Z",
  "updatedAt": "2019-04-03T21:35:08.575Z",
  "nodes": []
}