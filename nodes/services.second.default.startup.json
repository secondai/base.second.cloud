{
  "type": "types.second.default.service.js",
  "name": "services.second.default.startup",
  "data": {
    "key": "caa31b79-0ffc-417a-b7cc-9ed5d61332a6",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n  \n      console.log('Incoming Startup (setup, server, etc)');\n      \n      // // Start Express Server  \n      // await universe.loadAndRunCapability('ExpressServer',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'setup',\n      //     options: {}\n      //   }\n      // });\n    \n      let doneCanWipe;\n      universe.wipeFunc = new Promise(resolve=>{\n        doneCanWipe = resolve;\n      });\n      \n      // Create \"owner\" node if doesn't already exist \n      let ownerNode = await universe.getNodeAtPath('private.auth.owner');\n      if(!ownerNode){\n        console.log('Owner node does NOT exist, creating');\n        await universe.putNodeAtPath('private.auth.owner',{\n          type: 'types.second.default.auth.owner',\n          data: {\n            passphrase: universe.env.DEFAULT_PASSPHRASE\n          }\n        });\n        console.log('Created owner node w/ default passphrase');\n        ownerNode = await universe.getNodeAtPath('private.auth.owner');\n      }\n      \n      \n      // Start Express Server  \n\t\t\tawait universe.execService('services.second.default.capability.server', {\n\t\t\t  actionPath: 'builtin.input',\n\t\t\t  inputNode: {},\n\t\t\t  isOwner: true\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\t// Start IPFS watcher\n\t\t\tawait universe.execService('services.second.default.capability.ipfs', {\n\t\t\t  actionPath: 'builtin.input',\n\t\t\t  inputNode: {},\n\t\t\t  isOwner: true\n\t\t\t});\n\t\t\t\n\t\t// \tTODO: \n\t\t// - start Scheduler \n\t\t// - start Websocket server \n\t\t\t\n\t\t\t\n    \n      \n      // // Start Websocket (socketio) server \n      // let websocketSetupServerResult = await universe.loadAndRunCapability('Websockets',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'setupServer',\n      //     options: {}\n      //   }\n      // });\n      // console.log('Websocket serverSetup Result:', websocketSetupServerResult);\n        \n      // // connect to IPFS and re-setup IPFS links (identity is most important) \n      // var ipfsSetupResult = await universe.loadAndRunCapability('IPFS',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'setup',\n      //     options: {\n      //     }\n      //   }\n      // });\n      // var ipfsSyncResult = await universe.loadAndRunCapability('IPFS',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'sync',\n      //     options: {\n      //     }\n      //   }\n      // });\n    \n      // // Start Scheduler \n      // await universe.loadAndRunCapability('Scheduler',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'start',\n      //     options: {}\n      //   }\n      // });\n      \n      \n      \n      \n      return resolve({\n        type: 'boolean:...',\n        data: true\n      });\n      \n      \n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}