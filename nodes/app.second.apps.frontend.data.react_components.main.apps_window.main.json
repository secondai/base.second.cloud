{
  "name": "base.second.cloud.app.second.apps.frontend.data.react_components.main.apps_window.main",
  "type": "types.second.default.react_component.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          this.state = {\n            urlVal: 'github.com/secondai/app.second.sample_install',\n            apps: [],\n            loading: true\n          }\n          \n        }\n        \n        componentDidMount(){\n          this.fetchApps();\n        }\n        \n        @autobind\n        async fetchApps(){\n          \n          let response = await universe.fetch('/api/get_for_pattern',{\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              pattern: 'app.*.*',\n              excludeData: true\n            })\n          });\n          \n          console.log('Nodes Response (for pattern, apps):', response);\n          \n          let nodes = await response.json();\n          console.log('Nodes/Apps:', nodes);\n          \n          this.setState({\n            apps: nodes, \n            loading:false\n          })\n          \n        }\n        \n        render(){\n          \n          return (\n            <div>\n              Apps: \n              <br />{\n                this.state.apps.map(app=>{\n                  return (<div><a href={'/app/' + app.name}>{app.name}</a></div>)\n                })\n              }\n              {\n                this.state.loading ? 'Loading...':''\n              }\n              <br />\n              <input className=\"input\" placeholder=\"url for importing a new app\" value={this.state.urlVal} onChange={e=>this.setState({urlVal:e.target.value})} />\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      \n      resolve({\n        type: 'types.second.default.react_component',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-05T06:43:15.151Z",
  "updatedAt": "2019-03-17T22:24:29.964Z",
  "nodes": []
}