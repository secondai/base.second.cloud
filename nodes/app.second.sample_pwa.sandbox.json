{
  "name": "base.second.cloud.app.second.sample_pwa.sandbox",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--App Create Sandbox: --', SELF.name);\n      \n      // Fetch repo URL via .zip from appNode.data.staticFileRepo \n      // - extract to appNode's static file directory \n      // - run Docker build command using the input directory as path to run 'npm run second:build' \n      //   WORKDIR=attached-volume/app.second.xyz/directory-of-extracted files (pain in the ass to find?) \n      \n      let doneCanWipe;\n      universe.wipeFunc = new Promise(resolve=>{\n        doneCanWipe = resolve;\n      });\n      \n      // console.log('Writing file:', finalVolumeLookupPath, path.dirname(finalVolumeLookupPath));\n      // mkdirp.sync(path.dirname(finalVolumeLookupPath));\n      // fs.writeFileSync(finalVolumeLookupPath, 'testingafile');\n      \n      const path = universe.require('path');\n      const mkdirp = universe.require('mkdirp');\n      \n      let {\n        req,\n        res \n      } = universe.requestsCache[universe.requestId];\n      \n      let fs = universe.require('fs-extra');\n      let request = universe.require('request-promise-native');\n      let unzipper = universe.require('unzipper');\n      \n      let appPath = universe.navPathv1(SELF.name, 1)\n      let appNode = await universe.getNodeAtPath(appPath);\n      \n      let volumePrefix = universe.env.ATTACHED_VOLUME_ROOT + appPath;\n      \n      const { exec } = universe.require('child_process');\n      \n      // let command = `docker exec builder /bin/bash -c \"cd ${volumePrefix} && npm i && npm run second:build\"`;\n      let command = `cd / && PATH_TO_CODESANDBOX=${volumePrefix} /usr/src/app/expect-codesandbox-create-sandbox.exp`;\n      console.log('------Executing Command-------');\n      console.log('Command:', command);\n      exec(command, (err, stdout, stderr) => {\n        console.log('----------Returned from Command------------');\n        doneCanWipe()\n        if (err) {\n          console.error('------------------------------');\n          console.error(`---exec error: ${err}`);\n          console.error('------------------------------');\n            \n          res.send({\n            error: true,\n            message: 'Unable to create sandbox',\n            stdout: stdout,\n            stderr: stderr\n          });\n          return;\n        }\n      \n        console.log('------------------------------');\n        console.log(`---exec Run Output: ${stdout}`);\n        console.log('------------------------------');\n        \n        let matches = stdout.match(/\\[success\\] (https:\\/\\/codesandbox\\.io\\/s\\/\\w+)/);\n        if(matches){\n          console.log('FOUND MATCH:', matches);\n          console.log(matches[1]);\n          \n          let frontendSandboxUrl = matches[1];\n          \n          // Update sandboxUrl \n          // - TODO: lock \n          appNode = await universe.getNodeAtPath(appPath);\n          appNode.data.frontendSandboxUrl = frontendSandboxUrl;\n          // TODO: get frontendSandboxZipUrl via API call (SHOULD be sandboxUrl.zip) \n          appNode.data.frontendSandboxZipUrl = null; // frontendSandboxUrl + '.zip';\n          \n          \n          res.send({\n            sandboxUrl: matches[1]\n          });\n          \n          doneCanWipe();\n          \n        }\n        \n        \n        res.send({\n          error: true,\n          message: 'Unable to create sandbox',\n          stdout: stdout\n        });\n      });\n      \n        \n    }catch(err){\n      universe.scriptError(err, SELF);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-16T02:16:29.511Z",
  "updatedAt": "2019-03-17T21:50:28.410Z",
  "nodes": []
}