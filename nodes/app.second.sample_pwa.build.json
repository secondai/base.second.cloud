{
  "name": "base.second.cloud.app.second.sample_pwa.build",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--App Build: --', SELF.name);\n      \n      // Fetch repo URL via .zip from appNode.data.staticFileRepo \n      // - extract to appNode's static file directory \n      // - run Docker build command using the input directory as path to run 'npm run second:build' \n      //   WORKDIR=attached-volume/app.second.xyz/directory-of-extracted files (pain in the ass to find?) \n      \n      let doneCanWipe;\n      universe.wipeFunc = new Promise(resolve=>{\n        doneCanWipe = resolve;\n      });\n      \n      let {\n        req,\n        res \n      } = universe.requestsCache[universe.requestId];\n      \n      // RESPONDING IMMEDIATELY \n      res.send('Building...');\n      \n      // console.log('Writing file:', finalVolumeLookupPath, path.dirname(finalVolumeLookupPath));\n      // mkdirp.sync(path.dirname(finalVolumeLookupPath));\n      // fs.writeFileSync(finalVolumeLookupPath, 'testingafile');\n      \n      const path = universe.require('path');\n      const mkdirp = universe.require('mkdirp');\n      \n      let fs = universe.require('fs-extra');\n      let request = universe.require('request');\n      let unzipper = universe.require('unzipper');\n      \n      let appPath = universe.navPathv1(SELF.name, 1)\n      let appNode = await universe.getNodeAtPath(appPath);\n      \n      let volumePrefix = universe.env.ATTACHED_VOLUME_ROOT + appPath;\n      // let staticRootPath = volumePrefix + staticFileDirectory;\n      \n      // // clear directory \n      // // - shouldn't need to clear node_modules every time? \n      // fs.emptyDirSync(volumePrefix)\n      \n      // let zipUrl = appNode.data.frontendBuildDataZipUrl;\n      \n      // // fetch zip and extract to correct place \n      // console.log('Extracting');\n      // let Writer = universe.require('fstream').Writer;\n      // let removeFirstLevelDirectory = (zipUrl.indexOf('github') > -1 ) ? true:false; // necessary for importing zip from github \n      // // request('https://github.com/secondai/second_template_pwa/archive/master.zip')\n      // // request('https://repl.it/@nicholasareed/secondtemplatepwa.zip')\n      // await request(zipUrl)\n      // .pipe(unzipper.Extract({ \n      //   path: path.resolve(volumePrefix),\n      //   getWriter: ({path})=>{\n      //     // rewrite paths to extract to SAME DIRECTORY \n      //     // - fixes github zip, might break other sites \n      //     if(removeFirstLevelDirectory){\n      //       path = volumePrefix + '/' + path.substring(volumePrefix.length).split('/').slice(2).join('/');\n      //     }\n      //     console.log('updated path', path);\n      //     return Writer({path})\n      //   }\n      // }))\n      // .promise();\n      \n      // run build commands\n      // \n      console.log('------Running Build Commands-----');\n      \n      const { exec } = universe.require('child_process');\n\n      // let command = `docker exec builder /bin/bash -c \"cd /attached-volume && ls -al && cd app.second.sample_pwa && ls -al && pwd\"`;\n      \n      // things to do:\n      // - clear node_modules \n      // - install package.json \n      // - run build command \n      \n      let command = `docker exec builder /bin/bash -c \"cd ${volumePrefix} && npm i && npm run second:build\"`;\n      // let command = `codesandbox ${volumePrefix}`;\n      console.log('------Executing Command-------');\n      console.log('Command:', command);\n      exec(command, (err, stdout, stderr) => {\n        console.log('----------Returned from Command------------');\n        doneCanWipe()\n        if (err) {\n          console.error('------------------------------');\n          console.error(`---exec error: ${err}`);\n          console.error('------------------------------');\n          resolve(false);\n          return;\n        }\n      \n        console.log('------------------------------');\n        console.log(`---exec Run Output: ${stdout}`);\n        console.log('------------------------------');\n        resolve(true);\n      });\n      \n        \n    }catch(err){\n      universe.scriptError(err, SELF);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-16T02:16:29.740Z",
  "updatedAt": "2019-03-17T21:50:28.469Z",
  "nodes": []
}