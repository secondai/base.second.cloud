{
  "name": "base.second.cloud.data.second.default.routes.auth_grant.code",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--incoming_route_handler: Auth Grant (for owner) --');\n      \n      let htmlNode, page;\n      \n      // get request session object (for finding if logged in using a cookie) \n      let {\n        req,\n        res \n      } = universe.requestsCache[universe.requestId];\n      \n      if(req.session.loggedin){\n        \n        if(req.method.toLowerCase() == 'post'){\n          // granting request \n          \n          // generate token \n          // - save data for token, so can be picked back up \n          let tokenNode = {\n            type: 'types.second.default.auth.token',\n            data: {\n              isOwner: true\n            },\n            // extras: {}, // for additional key-value entries, that can be used by the permissions (groups, etc?) \n            // permissions: [], // should be a node w/ name=\"permissions\" in authObj.nodes[]\n            // nodes: []\n          };\n          \n          // from the incoming grant request \n          // - TODO: use a package system for permissions (check approval, etc) \n          let permissionsNode = {\n            type: 'types.second.default.permissions',\n            data: {\n              permissions: [\n                // default: allow all \n                {\n                  \"services\": [\n                    \"services.**\"\n                  ],\n                  \"events\": [\n                    \"pre\",\n                  ],\n                  \"code\": \"permission_codes.second.default.true\",\n                  \"vars\": {},\n                  \"output\": {\n                    \"true\": \"allow\"\n                  }\n                }\n              ]\n            }\n          }\n          \n          let tokenId = universe.uuidv4();\n          \n          console.log('tokenId created:', tokenId);\n          \n          let tokenNodeSaved = await universe.putNodeAtPath(`tokens.auth.${tokenId}`, tokenNode, {});\n          console.log(`Created token: tokens.auth.${tokenId}`);\n          let permissionsNodeSaved = await universe.putNodeAtPath(`tokens.auth.${tokenId}.permissions`, permissionsNode, {});\n          console.log(`Created Permissions: tokens.auth.${tokenId}.permissions`);\n          \n          console.log('Granted!');\n          \n          let redirect = req.query.redirect;\n          \n          res.redirect(redirect + '#&token=' + tokenId);\n          \n          return resolve(true);\n          \n        } else {\n          // show the \"grant\" page \n          htmlNode = await universe.getNodeAtPath('data.second.default.routes.auth_grant.grant_html');\n          page = htmlNode.data.html;\n        }\n        \n      } else {\n        \n        // htmlNode = await universe.getNodeAtPath('data.second.default.routes.auth_grant.login_html');\n        // page = htmlNode.data.html;\n        \n        res.redirect(`/auth/login?redirect=${encodeURIComponent(req.originalUrl)}`);\n        return resolve(true);\n        \n      }\n\n      res.send(page);\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-05T22:38:13.791Z",
  "updatedAt": "2019-03-17T21:50:37.788Z",
  "nodes": []
}